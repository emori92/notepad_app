id,question,hint,answer,created_at,updated_at,note_id
1,スクショ,"",command + shift + 4,2020-12-17 09:52:38.748029+00,2020-12-17 09:52:38.748059+00,2
2,動画キャプチャ,"",command + shift + 5,2020-12-17 09:53:39.318444+00,2020-12-17 09:53:39.318472+00,2
3,絵文字の入力,"",control + command + space,2020-12-17 09:54:24.103744+00,2020-12-17 09:54:24.103773+00,2
4,ひらがな変換,"",control + J,2020-12-17 09:54:44.024328+00,2020-12-17 09:54:44.02436+00,2
5,カタカナ変換,"",control + K,2020-12-17 09:55:03.044069+00,2020-12-17 09:55:03.044102+00,2
6,カレントディレクトリを表示,「カレントディレクトリ」は、現在いる場所のディレクトリのことです,pwd,2020-12-17 10:19:44.507151+00,2020-12-17 10:20:40.681655+00,3
7,ファイルの一覧,"",ls,2020-12-17 10:21:06.077657+00,2020-12-17 10:21:06.077684+00,3
8,pictureディレクトリに移動,"",cd picture,2020-12-17 10:23:51.92856+00,2020-12-17 10:23:51.92859+00,3
9,親のディレクトリへ移動,親のディレクトリは、一つ上のディレクトリの意味です。,"cd ..

(ちなみに、「cd ../..」と打ち込むと2つ上のディレクトリへ移動します)",2020-12-17 10:25:53.342524+00,2020-12-17 10:25:53.342554+00,3
10,homeディレクトリへ移動,「homeディレクトリ」は、ログインしたユーザの基本となるディレクトリのことです。,"cd ~

(MacやLinuxの場合、単に「cd」と打ち込むことでもhomeディレクトリに移動できます。",2020-12-17 10:28:39.818961+00,2020-12-17 10:29:16.999765+00,3
11,shellファイル(bash)の作成,"","#!/bin/bash

ls",2020-12-17 10:38:31.456521+00,2020-12-17 10:38:31.456549+00,3
12,shellファイルの実行,"",source name.sh,2020-12-17 10:39:26.828955+00,2020-12-17 10:39:47.817903+00,3
16,レスポンスとは何か,"","リクエストを元に作成された、HTMLファイルなどのデータ、またはエラーデータのこと。

例えば、サーバが「1000〜2000年の天気を取得」というリクエストを受け取った時、「2000年の天気」をレスポンスとして返したり、「1000年の天気は見つからない(404)」とエラーのレスポンスをクライアントに返したりする。",2020-12-17 12:52:18.527993+00,2020-12-17 13:48:23.025911+00,4
13,Webとは何か,"","クライアントがサーバに接続し「データ」に「何らかの操作」を行うネットワークのことです。
「何らかの操作」は「作成/取得/更新/削除」など多岐に渡ります。

例えば、Yahooのページにアクセスすると「ニュースや天気などの情報」を「取得」することや、Googleのサイトでログインし「ユーザ名」を「更新」する操作が例になります。",2020-12-17 11:15:27.848033+00,2020-12-17 11:21:58.800806+00,4
48,"- コンテナの状態

docker ps
docker ps -a
docker ps -q
docker ps -l
docker ps -lq","","起動中のコンテナ一覧
全てのコンテナ一覧
コンテナID一覧
最後に生成したコンテナ
最後に生成したコンテナID",2020-12-18 08:57:41.825215+00,2020-12-18 08:57:50.492682+00,7
50,ボリューム,"","コンテナ内のデータを、ホスト機に保存させる仕組みのこと。

コンテナは、何か問題が起きた時すぐに捨ててしまいます。
ただ、コンテナ内のデータも消えてしまいます。中には保存したいデータもあります。

例えば、ユーザが投稿した画像、サーバのログなどは永続的に保存したいデータです。
ボリュームは、このようなデータをホスト機に保存し、新たなコンテナに適用させる仕組みのことです。",2020-12-18 09:11:24.391856+00,2020-12-18 09:11:24.391902+00,7
14,クライアントとは何か,"","スマホやパソコンなど、ユーザが操作する機器のこと。
クライアントの役割は、サーバに「リクエスト」を送り、サーバからの「レスポンス」を受け取ることです。",2020-12-17 11:18:51.556783+00,2020-12-17 12:31:49.695972+00,4
15,リクエストとは何か,"","「データの作成/取得/更新/削除」などの操作を、サーバに要求(リクエスト)することを言います。

受け取ったリクエストから、サーバはクライアントに「レスポンス」を返します。",2020-12-17 12:39:38.491399+00,2020-12-17 12:39:38.491449+00,4
52,docker run -it -v ubuntu_dv:/tmp ubuntu /bin/bash,"-v: ホスト機とコンテナのディレクトリをマウントするオプションです。

マウントは「同期」と似た意味だと思ってください。
「ubuntu_dv」は、データボリュームのことです。","ubuntu_dvというデータボリュームと、コンテナの/tmpディレクトリをマウントしてubuntuコンテナを起動。

ここでは、コンテナ内の/tmpフォルダに何かしらファイルを作成すると、ubuntu_dvに保存されるようになります。

ubuntu_dvは、ホスト機に作成されます。
このコンテナが削除されても、ubuntu_dvは残り、新たなコンテナに再度マウントできます。",2020-12-18 09:18:59.458332+00,2020-12-18 09:20:17.545087+00,7
53,Dockerfileとは,"","Dockerfileとは、イメージを作成するファイルのことです。

イメージをカスタマイズしたい時に作成します。
例えば、Rubyの開発環境を作成したい場合、公式イメージのRubyから、同時にgemをインストールを指定します。

このように、開発者はDockerfileを用いて開発環境を用意します。",2020-12-18 09:28:02.119304+00,2020-12-18 09:28:02.11936+00,7
54,"- DockerfileでDjangoの開発環境を作成

FROM python

ENV DJANGO_SETTINGS_MODULE=config.settings

EXPOSE 8000

LABEL version=1.0

RUN pip install django && \
         django-admin startproject config .

CMD [ ""python"", ""./manage.py runserver 0.0.0.0:8000"" ]","","pythonのイメージをpull
環境変数の設定
ポートの設定
バージョンの記述
pipでDjangoをインストール
Djangoのプロジェクトを作成
開発サーバの立ち上げ",2020-12-18 09:42:33.40604+00,2020-12-18 09:42:33.406095+00,7
59,KPI,Key Performance Indicator,"業績を測る指標一種で、重要評価指数と呼ばれたりする。
「KGIの中間目標」かつ「定量的な指標」として利用される。

- クリック率
- 購入率
- 回遊率
- Twitter投稿回数
- コミュニティの所属数
- お気に入りのコミュニティ",2020-12-18 12:40:12.165565+00,2020-12-18 12:41:07.399279+00,8
55,docker build -t test-container .,-t: イメージの名前,test-containerという名前のイメージを、Dockerfileから作成,2020-12-18 09:44:40.292273+00,2020-12-18 09:50:55.166533+00,7
56,docker logs 394281,"",394281のログを確認,2020-12-18 09:54:56.785693+00,2020-12-18 09:54:56.785744+00,7
57,docker exec -it 394281 /bin/bash,"",394281のbashを起動,2020-12-18 09:57:09.868366+00,2020-12-18 09:57:09.868416+00,7
58,docker-compose,"","docker-composeは、複数以上のコンテナの作成・実行するツールです。

Dockerfileは1つのイメージのみで、複数の関連したコンテナを構築する時にdocker-composeを利用します。",2020-12-18 10:01:55.611475+00,2020-12-18 10:01:55.611526+00,7
60,KGI,Key Goal Indicator,"ビジネスの「最終目標」を示す指標。
目標は緩やかに設定され、厳正な中間指標としてKPIが使われる。

(例: 新規会員を2倍にする、全ユーザの8割が利用回数1回 => 5割まで減らす)",2020-12-18 12:42:07.124033+00,2020-12-18 12:42:07.124083+00,8
23,vimの3つのモードを答えてください。,"","Normalモード: コマンドを受け付ける
Insertモード: 文字を入力できる
Visualモード: 文字を選択できるようにする",2020-12-18 06:06:55.068246+00,2020-12-18 06:06:55.068283+00,5
17,サーバとは何か,"","リクエストを受け付ける機器のこと。

サーバの役割は、クライアントのリクエストを元に、レスポンスを作成し返すことです。
サーバは家庭用パソコンと似ており、OSがインストールされ、その中にWebサーバのソフトがインストールされています。

より複雑なWebシステムを構成する場合、Webサーバ以外にアプリサーバ、データベースサーバを用意します。

Webサーバ: クライアントからリクエストを受けつけレスポンスを返す。
Appサーバ: Webサーバでは処理できない複雑な処理を担当。
DBサーバ: データの保存を担当。

例えば、Webサーバが「天気の取得」というリクエストを受け取り、Appサーバにリクエストを託します。
Appサーバは、DBサーバに該当の「天気」のデータを取得するようリクエストし、レスポンスを受け取ります。
その後、Appサーバはクライアントが受け取れるレスポンスへ変換し、Webサーバに託します。
最後にWebサーバがクライアントにレスポンスを返します。",2020-12-17 12:56:00.423452+00,2020-12-17 13:26:39.509948+00,4
18,「サーバーサイド言語」とは何か,"","サーバの操作を行う言語のことです。

アプリケーション開発は「レスポンスの作成」や「データベースを参照」などの、サーバに対して操作する必要があります。
これらの操作を行う言語をサーバーサイド言語と言います。

主な言語として、Java、PHP、Ruby、Python、Goなどがあります。",2020-12-17 13:37:11.865763+00,2020-12-17 13:37:35.252458+00,4
19,「クライアントサイド」とは何か,"","クライアント周りのことです。

例えば、(一般的な呼称ではないですが)クライアントサイド言語は、スマホのアプリ、パソコンのブラウザなどを操作する言語を示します。

これらの言語は「スマホでこのボタンを押すと色が変わる」や「パソコンでボタンを押すと表示が消える」などの挙動を実装できます。

言語は、パソコンはJavaScript、スマホはSwift、Kotolin、Flutterなどが代表的です。",2020-12-17 13:42:51.157807+00,2020-12-17 13:47:07.405543+00,4
21,フロントエンドとは何か,"","目に見える部分のこと。クライアントサイドと同じ。

フロントエンドエンジニアは、JavaScript、またはSwiftやKotlinを扱うエンジニアのこと。",2020-12-17 14:00:20.591736+00,2020-12-17 14:00:20.591786+00,4
20,バックエンドとは何か,"","目に見えない裏側のこと。サーバーサイドとほぼ同じ意味。

バックエンドエンジニアは、PHP、Ruby、Python、Goなどの言語を扱うエンジニアのこと。",2020-12-17 13:58:28.820768+00,2020-12-17 14:01:38.539934+00,4
22,フレームワークとは何か,"","Webアプリケーションで必要になる、主要な機能を持ち合わせたライブラリのこと。

バックエンドのフレームワークには、レスポンスの作成、データベースの照会、ログインなどの機能があらかじめ用意されています。

代表的なフレームワーク
バックエンド: Ruby on Rails、Laravel、Djangoなど
フロントエンド: React、Vue、Angular、jQueryなど",2020-12-17 14:27:13.079296+00,2020-12-17 14:27:13.079427+00,4
43,Dockerとは,"",アプリケーションなどを仮想的に隔絶し実行するソフトウェア,2020-12-18 08:34:55.193197+00,2020-12-18 08:34:55.193248+00,7
46,"- imageの操作

docker pull ubuntu
docker images
docker rmi ubuntu","","ubuntuのイメージをダウンロード (DockerHubからpull)
imageの一覧表示
ubuntuイメージの削除",2020-12-18 08:48:44.472311+00,2020-12-18 08:48:44.472365+00,7
47,"- containerの操作

docker run -it ubuntu /bin/bash
docker run -it --name=docker_test ubuntu /bin/bash
docker rm 30c7da461f7e",-it: シェルの入力(i)と出力(t)を付けるオプション,"ubuntuのコンテナを作成、起動し、コンテナの/bin/bashを実行する
ubuntuのコンテナを起動し、コンテナに「docker_test」という名前を追加
コンテナID: 30c7da461f7eを削除",2020-12-18 08:55:53.351768+00,2020-12-18 08:55:53.351824+00,7
44,コンテナ,"","ソフトやライブラリをまとめた実行環境。
例えば「CentOSを入れたコンテナ」や「Apacheをインストールしたコンテナ」など。

コンテナは、イメージを元に作成される。",2020-12-18 08:36:11.784992+00,2020-12-18 08:45:59.717981+00,7
24,esc,"",Normalモードにする,2020-12-18 06:07:54.111317+00,2020-12-18 06:14:44.807897+00,5
25,i,コマンドは、Normalモードの時に入力する,Insertモードにする,2020-12-18 06:09:09.801296+00,2020-12-18 06:15:02.042566+00,5
26,a,"",カーソルを一つ右にしてInsertモード,2020-12-18 06:12:57.39184+00,2020-12-18 06:15:25.340449+00,5
27,I,"",カーソルを行の先頭にしてInsertモード,2020-12-18 06:15:48.703038+00,2020-12-18 06:15:48.703067+00,5
28,A,"",行末からInsertモード,2020-12-18 06:17:00.750618+00,2020-12-18 06:17:00.750647+00,5
29,:w,"",ファイルの保存,2020-12-18 06:17:29.373272+00,2020-12-18 06:17:54.652997+00,5
30,:q,"",vimの終了,2020-12-18 06:18:14.555161+00,2020-12-18 06:18:14.555187+00,5
31,:wq,"",ファイルを保存してvimを終了,2020-12-18 06:18:30.201301+00,2020-12-18 06:18:30.201328+00,5
32,:q!,"",ファイルを保存しないでvimを終了,2020-12-18 06:19:27.314297+00,2020-12-18 06:19:27.314327+00,5
33,control + f,"",1ページ下に移動,2020-12-18 06:22:41.213429+00,2020-12-18 06:22:41.213458+00,5
34,control + b,"",1ページ上に移動,2020-12-18 06:23:01.759511+00,2020-12-18 06:23:01.759539+00,5
35,yy,"",行をコピー,2020-12-18 06:23:44.805335+00,2020-12-18 06:23:44.805365+00,5
36,dd,"",行を切り取り,2020-12-18 06:23:57.586978+00,2020-12-18 06:23:57.587+00,5
37,p,"",ペースト,2020-12-18 07:26:34.523251+00,2020-12-18 07:26:34.523277+00,5
45,イメージ,"","コンテナにOSやソフトウェアなど組み込むため、情報をまとめた設計図のこと。
例として、「CentOSの情報を組み込んだイメージ」や「Apacheを組み込むイメージ」などがある。

オブジェクト指向の「クラス」に近い存在。
コンテナは「インスタンス」に近い。",2020-12-18 08:44:20.062501+00,2020-12-18 08:46:41.762662+00,7
38,"H, M, L","",画面の一番上、真ん中、下へ移動,2020-12-18 07:27:22.213165+00,2020-12-18 07:28:58.941263+00,5
39,"{, }","",（ブロック単位で）上、下に移動,2020-12-18 07:32:17.773767+00,2020-12-18 07:32:17.773819+00,5
40,:100,"",100行目に移動,2020-12-18 07:32:37.23367+00,2020-12-18 07:32:37.233721+00,5
42,:sp file_name,"",file_nameを画面縦に分割して開く,2020-12-18 07:35:08.652167+00,2020-12-18 07:35:08.652222+00,5
41,:vs file_name,"","file_nameを画面横に分割して開く

----
control + w + w: カーソルを移動
control + w + r: 画面を右回りに移動
----",2020-12-18 07:34:34.560191+00,2020-12-18 07:37:08.325769+00,5
49,"- コンテナ操作

docker start -ai 5fd0bfa0e112
docker stop 5fd0bfa0e112
docker kill 5fd0bfa0e112",-ai: 出力(a)と入力(i)のオプション,"ubuntuのbashを起動
コンテナを終了
コンテナを強制終了",2020-12-18 08:59:48.845422+00,2020-12-18 08:59:48.845471+00,7
51,"- ボリューム

docker volume create --name=ubuntu_dv
docker volume ls
docker volume rm ubuntu_dv","","ubuntu_dvという名のデータボリュームを作成
データボリューム一覧
データボリューム削除",2020-12-18 09:12:32.288737+00,2020-12-18 09:12:32.288794+00,7
61,OKR,Objective and Key Result,"目標(Objective)と成果指標(Key Result)のこと。
目標と期間(1週間 ~ 数ヶ月)、定量的な指標を決める。

- 目標は1つのみ設定。「ちょっと達成できないな、、」を基準にする。
- 指標は1~3つ設定。「平均を80、標準偏差を10」とする。
- 目標と指標は必ずオープンにし誰でも見れるようにする。
- 柔軟にフィードバックの機会を設ける(2~4週間に1回くらい)",2020-12-18 12:43:47.62163+00,2020-12-18 12:43:47.621679+00,8
62,DAU,"",SNSなどのサービスで、1日にサービスを利用したユーザー（アクティブユーザー）の数のことである。,2020-12-18 12:44:27.06456+00,2020-12-18 12:44:27.064615+00,8
63,マーケティングアクション,"",広告などの提供された情報によって引き起こされる行動のこと,2020-12-18 12:44:57.120636+00,2020-12-18 12:44:57.120681+00,8
64,「マーケット感覚」とは何か,"",社会や人が動く根源的な仕組みを理解する能力,2020-12-18 12:45:51.837655+00,2020-12-18 12:45:51.837708+00,8
65,「マーケティング」とは何か（『マーケット感覚を身につけよう』の定義による）,"",「マーケット感覚」を利用し何らかの目的を達成する手法,2020-12-18 12:46:24.362803+00,2020-12-18 12:46:24.362854+00,8
66,「市場」とはなにか,"労働市場
婚活市場","「何らかの価値」を
「需要者」と「供給者」が
「何らかの方法」で取引を行うこと

※「何らかの価値」はモノに限らず、「何らかの方法」も金に限らない。",2020-12-18 12:47:10.246283+00,2020-12-18 12:47:10.246337+00,8
67,⌘ + C,"",1行コピー,2020-12-19 05:12:38.257423+00,2020-12-19 05:12:38.257475+00,11
68,⌘ + X,"",1行切り取り,2020-12-19 05:12:55.086073+00,2020-12-19 05:12:55.086123+00,11
69,option + delete,"",単語ごとに削除,2020-12-19 05:13:35.567612+00,2020-12-19 05:13:35.56766+00,11
70,⌘ + delete,"",1行削除,2020-12-19 05:14:02.844793+00,2020-12-19 05:14:02.844844+00,11
71,⌘ + Shift + F,"",ファイル一括検索,2020-12-19 05:14:38.662259+00,2020-12-19 05:14:38.662308+00,11
72,⌘ + Shint + P,"",open console,2020-12-19 05:15:05.276084+00,2020-12-19 05:15:05.27614+00,11
73,control + `,"",open terminal,2020-12-19 05:15:28.097426+00,2020-12-19 05:15:28.097475+00,11
74,パッケージのバージョン確認,"",python -m module_name --version,2020-12-19 05:27:13.108999+00,2020-12-19 05:27:13.109046+00,13
75,pip: バージョン指定してアップグレード,"",pip install -U pip==2.0.30,2020-12-19 05:27:40.716754+00,2020-12-19 05:27:40.71682+00,13
77,Djangoで開発するメリット/デメリット,"","- メリット
認証、データベースの操作、formの処理など、Webでよく利用される機能をデフォルトで備わっていることです。

- デメリット
認証やデータベース操作など、利用しない機能がある場合は、容量の大きいライブラリになってしまう。",2020-12-19 05:59:34.581667+00,2020-12-19 05:59:34.581718+00,14
78,MVTとは何か,"","Model, Template, Viewのことです。

Model: データベースを担当する。DBのテーブルのこと。
Template: フロント層を担当する。動的なHTMLファイルのこと。
View: アプリを担当する。Webのリクエスト、レスポンスの処理を行う。

(Railsなどで採用されるMVCモデルは、Modelはデータベース、Viewはフロント、Cがアプリの処理を担当するので、MVCもMTVも大きな違いはありません)",2020-12-19 06:03:26.885367+00,2020-12-19 06:07:56.638717+00,14
79,新たなSECRET_KEYの作成（シェルで実行）,"",p manage.py shell -c 'from django.core.management import utils; print(utils.get_random_secret_key())',2020-12-19 06:09:05.218875+00,2020-12-19 06:09:05.218924+00,14
76,Djangoとは何か,"","PythonのフルスタックWebフレームワークです。

Web開発に頻繁に使われる機能として、認証機能、データベースの操作、セキュリティ対策などがあります。上記のように主要な機能を備えてるものをフルスタックフレームワークと呼ばれます。

他言語のフルスタックフレームワークとして、RubyのRuby on RialsやPHPのLaravelなどがあります。Djangoの特徴は、MTVモデルを採用している、デフォルトで管理サイトが用意されていることです。

Pythonの別のWebフレームワークとして、軽量フレームワークのFlaskがあります。",2020-12-19 05:45:24.396954+00,2020-12-19 05:51:13.020834+00,14
82,オンプレミス,"","サーバやネットワークを、自社や所有している物件などに構築する体制のこと。

クラウドの対義語として使われる。",2020-12-20 05:30:14.574878+00,2020-12-20 05:30:14.574904+00,15
81,クラウド,"","Web開発におけるクラウドは、インターネット上にある、サーバやネットワークのことです。

より厳密に言うと、世界各地のデータセンターにあるサーバをインターネットに接続し、ユーザに提供するサービスです。",2020-12-20 05:27:57.909031+00,2020-12-20 05:40:05.404049+00,15
83,クラウドのメリット・デメリット,"","- メリット
サーバやOS、設置する物件などを購入せずにサーバを構築できる(数百万から数億)
構築した後も、性能やOSなどを柔軟に変更できる

- デメリット
サーバや物件など、物理的な資産は残らない
サービスの条件によってはオンプレミスより割高になる
クラウドを提供しているデータセンターに障害が起こると、サービスが使えない",2020-12-20 05:38:08.307267+00,2020-12-20 05:38:49.955492+00,15
88,VPC,Amazon Virtual Private Cloud,"AWS内で作成された仮想のサーバ環境のこと。

オンプレミスでいうと、自社内に専用のネットワークを接続した状態。
選択したリージョン内にVPCが構築される。",2020-12-20 06:08:56.825268+00,2020-12-20 06:08:56.825295+00,15
89,ネットワーク（TCP/IP）,"","コンピュータ機器を接続し、相互にデータなどの操作を行えるようにした状態のことです。

例えば、スマホとインターネット上のサーバ、家のWi-Fiに繋いだスマホとパソコンなど。",2020-12-20 06:17:19.509916+00,2020-12-20 06:17:19.509941+00,6
84,AWSを使うメリット・デメリット,"","- メリット
数多のクラウドの中で世界1のシェア率
新サービスや改善が非常に活発である

- デメリット
デメリットはたぶんない",2020-12-20 05:44:00.262576+00,2020-12-20 05:44:00.262603+00,15
80,AWSとは,"","ユーザにクラウドを提供するサービスです。

他社のクラウドサービスとして、GoogleのGCP、MicrosoftのAzureなどがあります。",2020-12-20 05:24:51.494862+00,2020-12-20 05:44:58.489314+00,15
85,リージョン,"","サーバーを提供している場所のこと。

東京リージョン
シンガーポールリージョン",2020-12-20 05:47:12.125098+00,2020-12-20 05:47:12.125128+00,15
86,アベイラビリティゾーン,"","リージョン内でさらに分割された領域。

障害耐性を高めることが主な目的で、物理的にかなり距離が離れている。",2020-12-20 05:48:36.390468+00,2020-12-20 05:48:36.390498+00,15
87,AWSを利用する際の基本的なフロー,"","1. ネットワーク構築（VPC/サブネット/インターネットゲートウェイ/ルートテーブル）
2. サーバ構築（リージョン確認/EC2/AMI/キーペア）
3. サーバ初期設定（OS更新/タイムゾーン）
4. Webサーバ、DBサーバ構築・更新",2020-12-20 06:04:20.410016+00,2020-12-20 06:04:20.410044+00,15
90,IPアドレス,Internet Protocol Address,"コンピュータ機器の住所のことです。

ネットワークに接続した機器同士でやりとりを行うには、機器それぞれを特定・識別する必要があります。
特定、識別する手段として、機器に「住所」であるIPアドレスを与えます。",2020-12-20 06:21:22.068482+00,2020-12-20 06:25:47.295098+00,6
91,ポート,"","データのやりとりを行う「扉」のことです。
機器は、この「扉」を「開け閉め」してデータのやりとりをします。

例を考えましょう。スマホの「写真」と「動画」をPCに送る状況を考えます。
スマホ、PCにはIPアドレスがあります。一見、PCのIPアドレスに送ればOKだと思いますが、「写真」と「動画」はそれぞれデータのやりとりを行うポート(扉)が異なるのです。

ポートは「番号」で指定します。ここでは、写真のポートが5000、動画のポートは8000だとします。

もし、PCの5000のポート(写真)は「開いてる」が8000のポート(動画)が「閉じている」とき、写真は「送信成功」し、動画は「送信失敗」してしまうのです。

動画を送るためには、PCの8000ポートを「開く」必要があります。
機器同士でやりとりを行うにはIPアドレスとポートを適切に割り振る必要があるのです。

ポートは「悪意あるプログラムを通さない」というセキュリティ対策として設定されます。",2020-12-20 06:39:00.789636+00,2020-12-20 06:47:42.704066+00,6
93,CIDR,Classess Inter-Domain Routing,"IPアドレスの「ネットワーク部」を示す方法

「192.168.1.0/24」のように記載します。「~/24」の書き方によって、ネットワーク部を指定します。
IPアドレスの数は2の32乗 => 約43億個です。この「32乗」の内どこまでをネットワーク部にするか「~/24」の数値から決めます。

「~/24」の例で言うと2の24乗までが範囲です。
全くピンと来ないと思いますが、IPアドレスで示すと「192.168.1」の前半3つの範囲までがネットワーク部を示すことになります。

IPアドレスの最後の数値のところが余っていますが、例えばスマホは「192.168.1.100」PCは「192.168.1.200」など、機器に割り当てます。

「~/24」以外にも「~/0」から「~/32」まで指定できますが、「~/16」か「~/24」に設定することが多いです。
「~/16」の場合は「192.168」がネットワーク部で、スマホ「192.168.50.1」PC「192.168.100.1」と指定できます。",2020-12-20 07:52:48.732434+00,2020-12-20 08:10:06.691559+00,6
92,ネットワークの指定の仕方,"","IPアドレスとCIDR(サイダー)で指定ます。

例として、家庭のネットワークに「スマホ」と「PC」があるとします。
スマホのIPアドレスは「192.168.1.10」PCは「192.168.1.20」だとします。

両者をよく見ると前半の「192.168.1」の部分まで同じです。
この「192.168.1」が「どのネットワークか」を示し、この部分を「ネットワーク部」といいます。

ネットワーク部の指定はCIDRで行います。",2020-12-20 07:06:34.307677+00,2020-12-20 07:25:10.374537+00,6
94,サブネット,"","分割したネットワークのこと。

サブネットは、通信が効率的になる（ブロードキャスト）、セキュリティを強化できる（特定のサブネットのポートを閉じる）が主なメリットになります。

サブネットはIPアドレスとCIDRで指定します。
例えば「10.0.0.0/16」のネットワークがあるとします。
「10.0」までがネットワーク部で、スマホなどに「10.0.50.1」や「10.0.100.1」のIPアドレスを割り当てられます。

「10.0.0.0/16」のネットワークを2つに分割したい場合、「10.0.50.0/24」「10.0.100.0/24」と記載すると作成できます。
スマホのネットワークを「10.0.50」PCのネットワークを「10.0.100」などと、役割も含めて分割することができます。
（ブロードキャストの説明は割愛します）",2020-12-20 08:03:24.089654+00,2020-12-20 08:11:19.724791+00,6
95,ルーティング,"","目的のIPアドレスに応じて転送先を指定すること。

ルーティングはルートテーブルを作成し、ネットワークに適用させる必要がある。

例えば「0.0.0.0/0」のアドレスに「ネットワーク」を割り振るなど。",2020-12-20 08:21:00.095829+00,2020-12-20 08:24:43.420124+00,6
96,デフォルトゲートウェイ,"","「0.0.0.0/0」で示される、転送先が何も指定されていない、デフォルトの転送先のこと。
「0.0.0.0/0」は全てのIPアドレスを示す。",2020-12-20 08:26:57.123919+00,2020-12-20 08:26:57.123975+00,6
97,NAT,Network Address Translation,"IPアドレスを変換する技術。

「プライベートIPアドレス」がネットにパケットを送信する時、NATは送信元のアドレスを「パブリックIPアドレス」に変換する。
これによって、インターネットに接続していなくてもインターネットが可能になる。",2020-12-20 08:30:06.372613+00,2020-12-20 08:30:06.372758+00,6
98,インターネットゲートウェイ,"","サブネットをインターネットに接続するために用いるもの。
「プラベートネットワークにインターネット回線を引き込む」に近い作業。",2020-12-20 08:33:01.051291+00,2020-12-20 08:33:01.051342+00,15
99,EC2,Amazon Elastic Compute Cloud,"AWSの仮想サーバのこと。

AMIを元に作成される。作成されたEC2のことを「インスタンス」と呼ぶ。",2020-12-20 08:42:57.937635+00,2020-12-20 08:42:57.937683+00,15
100,AMI,Amazon Machine Image,EC2のOSのこと,2020-12-20 08:43:55.187916+00,2020-12-20 08:43:55.187965+00,15
101,EC2の構築手順,"","Linuxをアップデート
タイムゾーンと言語を設定
Linuxにユーザを追加
ソフトウェアのインストール
環境変数を設定",2020-12-20 08:46:01.119075+00,2020-12-20 08:46:01.119117+00,15
102,障害発生時の問題切り分け,"","1. クライアントはネットにつながっているか
2. DNSの名前解決が行われているか
3. ping応答できるか
4. http接続できるか（telnet）
5. アプリケーションに問題がないか",2020-12-20 08:47:11.342724+00,2020-12-20 08:47:11.342773+00,15
103,「強調フィルタリング」とは？,"","①「自分が消費した商品」と同じ商品を消費しているユーザを特定
②そのユーザから「自分が消費してない商品」をおすすめする

（ECサイト、SNSの友人の推薦など）",2020-12-20 08:54:26.063296+00,2020-12-20 08:54:26.063346+00,16
104,「内容ベースフィルタリング」とは,"","「自分が消費した商品」と「似た商品」をおすすめすること

（etc. 同じカテゴリの商品、関連するニュース）",2020-12-20 08:54:45.630447+00,2020-12-20 08:54:45.630499+00,16
105,協調フィルタリングが得意な実装は？,"","短期間で複数の消費がなされるサービス
（etc. ECサイト、SNS）",2020-12-20 08:55:03.942835+00,2020-12-20 08:55:03.942886+00,16
106,explicit feedback とはなにか,"",購入や評価などユーザが明確に興味をもった情報,2020-12-20 08:56:59.882812+00,2020-12-20 08:56:59.88286+00,16
107,implicit feedback とはなにか,"",閲覧など自然に得た情報,2020-12-20 08:57:13.580209+00,2020-12-20 08:57:13.580268+00,16
108,協調フィルタリングの苦手なこと,"","・蓄積されたデータがないと適用できない
・ニュースなどの「新しい価値」は適用できない
（古いニュースがおすすめされても、、）",2020-12-20 08:57:50.001559+00,2020-12-20 08:57:50.001608+00,16
109,内容ベースフィルタリングの得意な実装は？,"","・蓄積されたデータがなくても適用できる
・「商品と商品の距離（類似度）」と「ユーザの関心」が近いほど有効
（同じカテゴリ商品、同様のニュースなど）",2020-12-20 08:58:34.802645+00,2020-12-20 08:58:34.802692+00,16
110,内容ベースフィルタリングの苦手なことは,"","・商品同士から適切に距離を定義することが難しい
・商品の質が低いとUXが悪くなる",2020-12-20 08:58:55.027163+00,2020-12-20 08:58:55.027213+00,16
111,「ユーザベース協調フィルタリング」とは,（あなたと同じ商品を購入している人はBも購入しています）,"①ユーザベクトルを作成し、ユーザiとjの距離を計る
②iとjの距離が近いか判定
③距離が近い場合、iは購入してないjが購入した商品を推薦",2020-12-20 08:59:34.607215+00,2020-12-20 08:59:34.607267+00,16
112,「評価値行列（ユーザ - アイテム行列）」とは？,"",ユーザN人が商品M個に対して評価した行列,2020-12-20 08:59:51.520599+00,2020-12-20 08:59:51.520642+00,16
113,"・コサイン距離
・ジャカード係数","",ユーザベース協調フィルタリングで扱う、類似度の種類,2020-12-20 09:00:07.261405+00,2020-12-20 09:00:07.261467+00,16
114,「アイテムベース協調フィルタリング」とは,（この商品を購入した人はBも購入しています）,"①ユーザを次元(u)、次元の値を商品の評価(r)とし、アイテム(v)をベクトル作成する
②アイテムベクトル(v i)と(v j)の類似度を測る
③距離が近い場合は推薦",2020-12-20 09:00:31.567826+00,2020-12-20 09:00:31.567867+00,16
115,「メモリベース」と「モデルベース」の違いは何か,"","・メモリベース: システムが持つデータを直接recommenderに組み込む
・モデルベース: 統計的な手法を取り入れたrecommender

（協調フィルタリングは「次元削減」、内容ベースフィルタリングは「分類」を扱う）",2020-12-20 09:01:05.860124+00,2020-12-20 09:01:05.860198+00,16
116,C,"","d, m, s

長三和音です！",2020-12-20 09:14:55.349541+00,2020-12-20 09:14:55.349602+00,17
117,Cm,"","d, ma, s

短三和音です！",2020-12-20 09:15:20.638587+00,2020-12-20 09:15:20.638635+00,17
119,Cm7,"","d, ma, s, ta

副七和音です！なかなか緊張感があります！",2020-12-20 09:17:35.079147+00,2020-12-20 09:17:35.079205+00,17
118,C7,"","d, m, s, ta

属七和音です！
「セブンス」と愛称されるやつで、ドミナントで使われます！",2020-12-20 09:16:34.998873+00,2020-12-20 09:18:34.614599+00,17
120,C aug,"","d, m, si

増三和音です！
かなり派手ですね！",2020-12-20 09:19:47.993837+00,2020-12-20 09:19:47.993887+00,17
131,テスト設計のポイント,"","独自に組み込んだロジックに対してテストする
異常値のテストを入念に行う

上記の点を考慮し、正常値/異常値の動作を想定しテストする。
正常値は代表値、境界値をテストする。",2020-12-20 13:16:57.326306+00,2020-12-20 13:16:57.326337+00,19
122,C△7（別記: CM7）,"","d, m, s, t

メジャーセブンス！
1900年くらいから生まれた、近代を代表するコードです！
J-popでもめっちゃ使われます！",2020-12-20 09:22:59.928093+00,2020-12-20 09:24:06.276282+00,17
121,Cm -5,"","d, ma, se

減三和音です！
とにかく印象に残したいときに！",2020-12-20 09:21:00.575254+00,2020-12-20 09:25:10.333436+00,17
123,C sus4,C suspended 4,"d, f, s

サスペンデットフォー！！！！
こいつがいると曲が輝きます！大好きです！",2020-12-20 09:26:13.986018+00,2020-12-20 09:26:13.986069+00,17
124,document.getElementById('id-name');,ドキュメント.Idで要素をゲット('id-name');,'id-name'というidのついた要素を取得,2020-12-20 09:36:51.357216+00,2020-12-20 09:36:51.357267+00,18
125,let name = document.getElementById('id-name');,"",nameという変数を定義,2020-12-20 09:38:46.199083+00,2020-12-20 09:38:46.199259+00,18
126,const name = document.getElementById('id-name');,"",nameという定数を定義,2020-12-20 09:39:06.93384+00,2020-12-20 09:39:06.933891+00,18
127,name.classList.add('container');,"",nameに'container'クラスを追加,2020-12-20 09:40:43.960598+00,2020-12-20 09:40:43.960647+00,18
128,name.classList.remove('d-none');,"",nameの'd-none'クラスを削除,2020-12-20 09:41:31.469089+00,2020-12-20 09:41:31.469138+00,18
132,代表値,"","正常値の中で、想定される模範的な値。

例えば年齢のフォームにおいて、正常値は「0~100」ぐらいまでを想定できる。
この正常値を代表して「36」という値をテストする。",2020-12-20 13:19:09.270681+00,2020-12-20 13:19:09.270711+00,19
133,境界値,"","正常値、異常値の境目となる値。

例えば年齢のフォームにおいて「0~100」を境目とする。
この「100」の値でテストを行う。",2020-12-20 13:21:19.06127+00,2020-12-20 13:21:19.061296+00,19
129,テストをやる目的,"","ソフトウェアの品質を保つこと。

アプリに優れた機能があっても、致命的なバグがありユーザや開発者に影響を与えてしまう場合、ソフトウェアとして失敗している。

想定通りの挙動か、異常な動作がないかを確認するために、テストを行う。",2020-12-20 09:47:08.64222+00,2020-12-20 13:09:16.313109+00,19
134,異常値の例 (年齢のフォームで、入力範囲を「0~100」とする),"","1. 境界値を超えた値: -1, 101
2. 空白: 
3. 記号: !@#$%^
4. 少数

上記は例で、想定される異常値は多岐にわたる",2020-12-20 13:25:43.887151+00,2020-12-20 13:26:11.152685+00,19
130,正常値、異常値,"","- 正常値
設計において想定した値 (mail: masa@example.com)

- 異常値
設計で想定していない値 (mail: !@#$%^^&*)",2020-12-20 13:08:15.389568+00,2020-12-20 13:09:58.729161+00,19
135,git init,"",リポジトリを作成,2020-12-20 13:38:00.518319+00,2020-12-20 13:38:00.518346+00,20
137,git status,"",リポジトリの状態を確認,2020-12-20 13:45:26.101503+00,2020-12-20 13:45:26.101531+00,20
138,git branch,"",ブランチの一覧,2020-12-20 13:45:40.012767+00,2020-12-20 13:45:40.012794+00,20
139,git branch name,"",nameというブランチを作成,2020-12-20 13:46:21.178159+00,2020-12-20 13:46:21.178186+00,20
136,git clone https://github.com/flutter/flutter.git,"",URLで指定したリポジトリを、ローカルにクローン,2020-12-20 13:43:39.648849+00,2020-12-20 13:46:52.147531+00,20
140,git chekout name,"",nameブランチに移動,2020-12-20 13:47:36.249635+00,2020-12-20 13:47:36.249661+00,20
141,git add .,"",変更したファイル全てをステージに乗せる,2020-12-20 13:48:47.287157+00,2020-12-20 13:48:47.287187+00,20
142,git commit -m 'first commit',"",変更したファイルの状態を記録(コミット)し、'first commit'というコメントをつける,2020-12-20 13:50:12.896911+00,2020-12-20 13:50:12.896938+00,20
143,git log,"","コミットの履歴の一覧

「git log --oneline」で簡易表示にする",2020-12-20 13:51:20.047558+00,2020-12-20 13:52:01.145196+00,20
144,git push origin name,"",nameブランチをリモートリポジトリ(origin)にプッシュ(送信),2020-12-20 13:53:28.792403+00,2020-12-20 13:53:28.792502+00,20
145,git pull origin master,"",masterブランチに、リモートリポジトリ(origin)をプル(ダウンロード),2020-12-20 13:54:28.985295+00,2020-12-20 13:54:28.985398+00,20
146,git reset 3968,"",3698のコミットを取り消す,2020-12-20 13:56:33.572847+00,2020-12-20 13:56:33.572875+00,20
